// Prisma schema for EZComputers ecommerce + custom PC builder platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum ProductCategory {
  GAMING
  CREATOR
  WORKSTATION
  COMPACT
  ENTERPRISE
  HOME_OFFICE
}

enum ProductStatus {
  ACTIVE
  COMING_SOON
  DISCONTINUED
}

enum ComponentKind {
  CPU
  MOTHERBOARD
  GPU
  MEMORY
  STORAGE
  POWER_SUPPLY
  CASE
  COOLING
  OS
  SOFTWARE
  ACCESSORY
  SERVICE
}

enum OrderStatus {
  DRAFT
  PROCESSING
  FULFILLED
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  passwordHash           String?
  role                   UserRole        @default(CUSTOMER)
  twoFactorEnabled       Boolean         @default(false)
  twoFactorSecret        String?
  twoFactorRecoveryCodes String?
  reviews                ProductReview[]
  orders                 Order[]
  customBuilds           CustomBuild[]
  carts                  Cart[]
  savedBuilds            SavedBuild[]
  accounts               Account[]
  sessions               Session[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id               String                 @id @default(cuid())
  name             String
  slug             String                 @unique
  headline         String?
  description      String
  shortDescription String?
  category         ProductCategory
  status           ProductStatus          @default(ACTIVE)
  basePriceCents   Int                    @default(0)
  msrpCents        Int?
  discountPercent  Float?                 @default(0)
  inventory        Int                    @default(10)
  isFeatured       Boolean                @default(false)
  heroImage        String?
  gallery          ProductImage[]
  specifications   ProductSpecification[]
  reviews          ProductReview[]
  components       ProductComponent[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String
  position  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSpecification {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  label     String
  value     String
  group     String?
  position  Int     @default(0)
}

model ProductReview {
  id        String   @id @default(cuid())
  rating    Int
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
  author    String?
}

model ProductComponent {
  id          String          @id @default(cuid())
  productId   String
  componentId String
  kind        ComponentKind
  label       String
  summary     String?
  position    Int             @default(0)
  createdAt   DateTime        @default(now())
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  component   ComponentOption @relation(fields: [componentId], references: [id])

  @@unique([productId, componentId])
}

model ComponentOption {
  id              String                 @id @default(cuid())
  name            String
  slug            String                 @unique
  brand           String
  kind            ComponentKind
  description     String
  image           String?
  priceCents      Int                    @default(0)
  msrpCents       Int?
  compatibility   String?
  specs           String?
  stock           Int                    @default(50)
  isRecommended   Boolean                @default(false)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  productUsages   ProductComponent[]
  buildSelections CustomBuildComponent[]
}

model CustomBuild {
  id               String                 @id @default(cuid())
  name             String
  slug             String                 @unique
  summary          String?
  notes            String?
  coverImage       String?
  estimatedWattage Int?
  basePriceCents   Int                    @default(0)
  adjustmentsCents Int                    @default(0)
  totalPriceCents  Int                    @default(0)
  configuration    String?
  visibility       String                 @default("private")
  status           String                 @default("draft")
  userId           String?
  user             User?                  @relation(fields: [userId], references: [id])
  components       CustomBuildComponent[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  savedBy          SavedBuild[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

model CustomBuildComponent {
  id          String          @id @default(cuid())
  buildId     String
  componentId String
  kind        ComponentKind
  isPrimary   Boolean         @default(true)
  position    Int             @default(0)
  notes       String?
  build       CustomBuild     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  component   ComponentOption @relation(fields: [componentId], references: [id])

  @@unique([buildId, componentId])
}

model SavedBuild {
  id        String      @id @default(cuid())
  userId    String
  buildId   String
  name      String?
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  build     CustomBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)

  @@unique([userId, buildId])
}

model Cart {
  id              String     @id @default(cuid())
  userId          String?
  sessionId       String?    @unique
  paymentIntentId String?    @unique
  subtotalCents   Int        @default(0)
  taxCents        Int        @default(0)
  totalCents      Int        @default(0)
  currency        String     @default("USD")
  status          String     @default("active")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User?      @relation(fields: [userId], references: [id])
  items           CartItem[]
  orders          Order[]
}

model CartItem {
  id             String       @id @default(cuid())
  cartId         String
  productId      String?
  customBuildId  String?
  quantity       Int          @default(1)
  unitPriceCents Int          @default(0)
  lineTotalCents Int          @default(0)
  configuration  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  cart           Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product?     @relation(fields: [productId], references: [id])
  customBuild    CustomBuild? @relation(fields: [customBuildId], references: [id])
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  status          OrderStatus   @default(PROCESSING)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotalCents   Int           @default(0)
  taxCents        Int           @default(0)
  shippingCents   Int           @default(0)
  totalCents      Int           @default(0)
  currency        String        @default("USD")
  paymentMethod   String?
  trackingNumber  String?
  notes           String?
  placedAt        DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String?
  cartId          String?
  paymentIntentId String?       @unique
  billingAddress  String?
  shippingAddress String?
  user            User?         @relation(fields: [userId], references: [id])
  cart            Cart?         @relation(fields: [cartId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id             String       @id @default(cuid())
  orderId        String
  productId      String?
  customBuildId  String?
  name           String
  subtitle       String?
  quantity       Int          @default(1)
  unitPriceCents Int          @default(0)
  lineTotalCents Int          @default(0)
  metadata       String?
  createdAt      DateTime     @default(now())
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product?     @relation(fields: [productId], references: [id])
  customBuild    CustomBuild? @relation(fields: [customBuildId], references: [id])
}

model ContactRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  subject   String?
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscriber {
  id             String    @id @default(cuid())
  email          String    @unique
  source         String?
  userAgent      String?
  ipAddress      String?
  subscribedAt   DateTime  @default(now())
  confirmedAt    DateTime?
  unsubscribedAt DateTime?
}
